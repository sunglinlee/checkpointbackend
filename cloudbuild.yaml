steps:
  # 步驟 1: 檢查文件變更
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "=== Checking for file changes ==="
        echo "Current commit: $COMMIT_SHA"
        
        # 獲取上一次成功部署的 commit SHA
        LAST_SHA=$$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format="value(metadata.annotations.\"run.googleapis.com/commit-sha\")" \
          2>/dev/null || echo "")
        
        if [ -z "$$LAST_SHA" ]; then
          echo "No previous deployment found, proceeding with full deployment"
          echo "DEPLOY=true" > /workspace/deploy_decision.env
        else
          echo "Last deployed SHA: $$LAST_SHA"
          
          # 設定 git 配置
          git config --global --add safe.directory /workspace
          
          # 檢查文件變更
          CHANGED_FILES=$$(git diff --name-only $$LAST_SHA..$COMMIT_SHA 2>/dev/null || echo "all")
          echo "Changed files:"
          echo "$$CHANGED_FILES"
          
          # 檢查是否有相關變更
          SHOULD_DEPLOY=false
          
          # 檢查 src 目錄
          if echo "$$CHANGED_FILES" | grep -q "src/"; then
            echo "Found changes in src/ directory"
            SHOULD_DEPLOY=true
          fi
          
          # 檢查 pom.xml
          if echo "$$CHANGED_FILES" | grep -q "pom.xml"; then
            echo "Found changes in pom.xml"
            SHOULD_DEPLOY=true
          fi
          
          # 檢查 Dockerfile
          if echo "$$CHANGED_FILES" | grep -q "Dockerfile"; then
            echo "Found changes in Dockerfile"
            SHOULD_DEPLOY=true
          fi
          
          # 檢查配置文件
          if echo "$$CHANGED_FILES" | grep -qE "\.(yml|yaml|properties)$$"; then
            echo "Found changes in configuration files"
            SHOULD_DEPLOY=true
          fi
          
          if [ "$$SHOULD_DEPLOY" = true ]; then
            echo "DEPLOY=true" > /workspace/deploy_decision.env
            echo "Will proceed with deployment"
          else
            echo "DEPLOY=false" > /workspace/deploy_decision.env
            echo "No relevant changes detected, skipping deployment"
          fi
        fi
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'

  # 步驟 2: 條件性建置容器映像檔
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/deploy_decision.env
        if [ "$$DEPLOY" = "true" ]; then
          echo "Building Docker image..."
          docker build -t ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$COMMIT_SHA .
          echo "Docker build completed"
        else
          echo "Skipping Docker build - no deployment needed"
        fi

  # 步驟 3: 登入 Artifact Registry（僅在需部署時）
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/deploy_decision.env
        if [ "$$DEPLOY" = "true" ]; then
          echo "Configuring docker auth for Artifact Registry..."
          gcloud auth configure-docker ${_REGION}-docker.pkg.dev -q
        else
          echo "Skipping docker auth - no deployment needed"
        fi
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'

  # 步驟 4: 條件性推送映像檔
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/deploy_decision.env
        if [ "$$DEPLOY" = "true" ]; then
          echo "Pushing Docker image..."
          docker push ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$COMMIT_SHA
          echo "Docker push completed"
        else
          echo "Skipping Docker push - no deployment needed"
        fi

# 步驟 5: 條件性部署到 Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/deploy_decision.env
        if [ "$$DEPLOY" = "true" ]; then
          echo "Deploying to Cloud Run with full database configuration..."
          gcloud run deploy ${_SERVICE_NAME} \
            --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$COMMIT_SHA \
            --region=${_REGION} \
            --service-account=${_SERVICE_ACCOUNT_EMAIL} \
            --platform=managed \
            --allow-unauthenticated \
            --add-cloudsql-instances=${_DB_INSTANCE_CONNECTION_NAME} \
            --set-env-vars="DB_NAME=${_DB_NAME},DB_USER=${_DB_USER}" \
            --set-secrets="DB_PASSWORD=${_DB_SECRET_NAME}:latest" \
            --update-annotations="run.googleapis.com/commit-sha=$COMMIT_SHA"
          echo "Deployment completed successfully"
        else
          echo "Skipping Cloud Run deployment - no changes detected"
        fi
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100

substitutions:
  _SERVICE_NAME: checkpoint-backend
  _REGION: asia-east1
  _REPOSITORY: checkpoint2cicd
  _IMAGE_NAME: checkpoint-be
  _DB_INSTANCE_CONNECTION_NAME: civil-hash-468807-a8:asia-east1:checkpointdb1709
  _SERVICE_ACCOUNT_EMAIL: checkpoint-be2db@civil-hash-468807-a8.iam.gserviceaccount.com
  _DB_NAME: checkpoint_db
  _DB_USER: checkpointdb1709
  _DB_SECRET_NAME: CheckPointSM